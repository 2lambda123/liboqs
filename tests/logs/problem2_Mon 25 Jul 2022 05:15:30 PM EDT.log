============================= test session starts ==============================
platform linux -- Python 3.10.5, pytest-7.1.2, pluggy-1.0.0 -- /usr/bin/python3
cachedir: .pytest_cache
rootdir: /home/kjmoraes/Co-op/Work Term I - Spring 2022/liboqs
plugins: forked-1.4.0, xdist-2.5.0, cov-3.0.0, timeout-1.4.2, flaky-3.7.0
collecting ... collected 139 items

tests/test_cmdline.py::test_examples[example_kem] PASSED                 [  0%]
tests/test_cmdline.py::test_examples[example_sig] FAILED                 [  1%]
tests/test_cmdline.py::test_kem[BIKE-L1] PASSED                          [  2%]
tests/test_cmdline.py::test_kem[BIKE-L3] PASSED                          [  2%]
tests/test_cmdline.py::test_kem[Classic-McEliece-348864] PASSED          [  3%]
tests/test_cmdline.py::test_kem[Classic-McEliece-348864f] PASSED         [  4%]
tests/test_cmdline.py::test_kem[Classic-McEliece-460896] PASSED          [  5%]
tests/test_cmdline.py::test_kem[Classic-McEliece-460896f] PASSED         [  5%]
tests/test_cmdline.py::test_kem[Classic-McEliece-6688128] PASSED         [  6%]
tests/test_cmdline.py::test_kem[Classic-McEliece-6688128f] PASSED        [  7%]
tests/test_cmdline.py::test_kem[Classic-McEliece-6960119] PASSED         [  7%]
tests/test_cmdline.py::test_kem[Classic-McEliece-6960119f] PASSED        [  8%]
tests/test_cmdline.py::test_kem[Classic-McEliece-8192128] PASSED         [  9%]
tests/test_cmdline.py::test_kem[Classic-McEliece-8192128f] PASSED        [ 10%]
tests/test_cmdline.py::test_kem[HQC-128] PASSED                          [ 10%]
tests/test_cmdline.py::test_kem[HQC-192] PASSED                          [ 11%]
tests/test_cmdline.py::test_kem[HQC-256] PASSED                          [ 12%]
tests/test_cmdline.py::test_kem[Kyber512] PASSED                         [ 12%]
tests/test_cmdline.py::test_kem[Kyber768] PASSED                         [ 13%]
tests/test_cmdline.py::test_kem[Kyber1024] PASSED                        [ 14%]
tests/test_cmdline.py::test_kem[Kyber512-90s] PASSED                     [ 15%]
tests/test_cmdline.py::test_kem[Kyber768-90s] PASSED                     [ 15%]
tests/test_cmdline.py::test_kem[Kyber1024-90s] PASSED                    [ 16%]
tests/test_cmdline.py::test_kem[NTRU-HPS-2048-509] PASSED                [ 17%]
tests/test_cmdline.py::test_kem[NTRU-HPS-2048-677] PASSED                [ 17%]
tests/test_cmdline.py::test_kem[NTRU-HPS-4096-821] PASSED                [ 18%]
tests/test_cmdline.py::test_kem[NTRU-HPS-4096-1229] PASSED               [ 19%]
tests/test_cmdline.py::test_kem[NTRU-HRSS-701] PASSED                    [ 20%]
tests/test_cmdline.py::test_kem[NTRU-HRSS-1373] PASSED                   [ 20%]
tests/test_cmdline.py::test_kem[ntrulpr653] PASSED                       [ 21%]
tests/test_cmdline.py::test_kem[ntrulpr761] PASSED                       [ 22%]
tests/test_cmdline.py::test_kem[ntrulpr857] PASSED                       [ 23%]
tests/test_cmdline.py::test_kem[ntrulpr1277] PASSED                      [ 23%]
tests/test_cmdline.py::test_kem[sntrup653] PASSED                        [ 24%]
tests/test_cmdline.py::test_kem[sntrup761] PASSED                        [ 25%]
tests/test_cmdline.py::test_kem[sntrup857] PASSED                        [ 25%]
tests/test_cmdline.py::test_kem[sntrup1277] PASSED                       [ 26%]
tests/test_cmdline.py::test_kem[LightSaber-KEM] PASSED                   [ 27%]
tests/test_cmdline.py::test_kem[Saber-KEM] PASSED                        [ 28%]
tests/test_cmdline.py::test_kem[FireSaber-KEM] PASSED                    [ 28%]
tests/test_cmdline.py::test_kem[FrodoKEM-640-AES] PASSED                 [ 29%]
tests/test_cmdline.py::test_kem[FrodoKEM-640-SHAKE] PASSED               [ 30%]
tests/test_cmdline.py::test_kem[FrodoKEM-976-AES] PASSED                 [ 30%]
tests/test_cmdline.py::test_kem[FrodoKEM-976-SHAKE] PASSED               [ 31%]
tests/test_cmdline.py::test_kem[FrodoKEM-1344-AES] PASSED                [ 32%]
tests/test_cmdline.py::test_kem[FrodoKEM-1344-SHAKE] PASSED              [ 33%]
tests/test_cmdline.py::test_kem[SIDH-p434] PASSED                        [ 33%]
tests/test_cmdline.py::test_kem[SIDH-p434-compressed] PASSED             [ 34%]
tests/test_cmdline.py::test_kem[SIDH-p503] PASSED                        [ 35%]
tests/test_cmdline.py::test_kem[SIDH-p503-compressed] PASSED             [ 35%]
tests/test_cmdline.py::test_kem[SIDH-p610] PASSED                        [ 36%]
tests/test_cmdline.py::test_kem[SIDH-p610-compressed] PASSED             [ 37%]
tests/test_cmdline.py::test_kem[SIDH-p751] PASSED                        [ 38%]
tests/test_cmdline.py::test_kem[SIDH-p751-compressed] PASSED             [ 38%]
tests/test_cmdline.py::test_kem[SIKE-p434] PASSED                        [ 39%]
tests/test_cmdline.py::test_kem[SIKE-p434-compressed] PASSED             [ 40%]
tests/test_cmdline.py::test_kem[SIKE-p503] PASSED                        [ 41%]
tests/test_cmdline.py::test_kem[SIKE-p503-compressed] PASSED             [ 41%]
tests/test_cmdline.py::test_kem[SIKE-p610] PASSED                        [ 42%]
tests/test_cmdline.py::test_kem[SIKE-p610-compressed] PASSED             [ 43%]
tests/test_cmdline.py::test_kem[SIKE-p751] PASSED                        [ 43%]
tests/test_cmdline.py::test_kem[SIKE-p751-compressed] PASSED             [ 44%]
tests/test_cmdline.py::test_sig[picnic_L1_FS] SKIPPED (Not enabled)      [ 45%]
tests/test_cmdline.py::test_sig[picnic_L1_UR] SKIPPED (Not enabled)      [ 46%]
tests/test_cmdline.py::test_sig[picnic_L1_full] SKIPPED (Not enabled)    [ 46%]
tests/test_cmdline.py::test_sig[picnic_L3_FS] SKIPPED (Not enabled)      [ 47%]
tests/test_cmdline.py::test_sig[picnic_L3_UR] SKIPPED (Not enabled)      [ 48%]
tests/test_cmdline.py::test_sig[picnic_L3_full] SKIPPED (Not enabled)    [ 48%]
tests/test_cmdline.py::test_sig[picnic_L5_FS] SKIPPED (Not enabled)      [ 49%]
tests/test_cmdline.py::test_sig[picnic_L5_UR] SKIPPED (Not enabled)      [ 50%]
tests/test_cmdline.py::test_sig[picnic_L5_full] SKIPPED (Not enabled)    [ 51%]
tests/test_cmdline.py::test_sig[picnic3_L1] SKIPPED (Not enabled)        [ 51%]
tests/test_cmdline.py::test_sig[picnic3_L3] SKIPPED (Not enabled)        [ 52%]
tests/test_cmdline.py::test_sig[picnic3_L5] SKIPPED (Not enabled)        [ 53%]
tests/test_cmdline.py::test_sig[Dilithium2] SKIPPED (Not enabled)        [ 53%]
tests/test_cmdline.py::test_sig[Dilithium3] SKIPPED (Not enabled)        [ 54%]
tests/test_cmdline.py::test_sig[Dilithium5] SKIPPED (Not enabled)        [ 55%]
tests/test_cmdline.py::test_sig[Dilithium2-AES] SKIPPED (Not enabled)    [ 56%]
tests/test_cmdline.py::test_sig[Dilithium3-AES] SKIPPED (Not enabled)    [ 56%]
tests/test_cmdline.py::test_sig[Dilithium5-AES] SKIPPED (Not enabled)    [ 57%]
tests/test_cmdline.py::test_sig[Falcon-512] PASSED                       [ 58%]
tests/test_cmdline.py::test_sig[Falcon-1024] PASSED                      [ 58%]
tests/test_cmdline.py::test_sig[Rainbow-I-Classic] SKIPPED (Not enabled) [ 59%]
tests/test_cmdline.py::test_sig[Rainbow-I-Circumzenithal] SKIPPED (N...) [ 60%]
tests/test_cmdline.py::test_sig[Rainbow-I-Compressed] SKIPPED (Not e...) [ 61%]
tests/test_cmdline.py::test_sig[Rainbow-III-Classic] SKIPPED (Not en...) [ 61%]
tests/test_cmdline.py::test_sig[Rainbow-III-Circumzenithal] SKIPPED      [ 62%]
tests/test_cmdline.py::test_sig[Rainbow-III-Compressed] SKIPPED (Not...) [ 63%]
tests/test_cmdline.py::test_sig[Rainbow-V-Classic] SKIPPED (Not enabled) [ 64%]
tests/test_cmdline.py::test_sig[Rainbow-V-Circumzenithal] SKIPPED (N...) [ 64%]
tests/test_cmdline.py::test_sig[Rainbow-V-Compressed] SKIPPED (Not e...) [ 65%]
tests/test_cmdline.py::test_sig[SPHINCS+-Haraka-128f-robust] SKIPPED     [ 66%]
tests/test_cmdline.py::test_sig[SPHINCS+-Haraka-128f-simple] SKIPPED     [ 66%]
tests/test_cmdline.py::test_sig[SPHINCS+-Haraka-128s-robust] SKIPPED     [ 67%]
tests/test_cmdline.py::test_sig[SPHINCS+-Haraka-128s-simple] SKIPPED     [ 68%]
tests/test_cmdline.py::test_sig[SPHINCS+-Haraka-192f-robust] SKIPPED     [ 69%]
tests/test_cmdline.py::test_sig[SPHINCS+-Haraka-192f-simple] SKIPPED     [ 69%]
tests/test_cmdline.py::test_sig[SPHINCS+-Haraka-192s-robust] SKIPPED     [ 70%]
tests/test_cmdline.py::test_sig[SPHINCS+-Haraka-192s-simple] SKIPPED     [ 71%]
tests/test_cmdline.py::test_sig[SPHINCS+-Haraka-256f-robust] SKIPPED     [ 71%]
tests/test_cmdline.py::test_sig[SPHINCS+-Haraka-256f-simple] SKIPPED     [ 72%]
tests/test_cmdline.py::test_sig[SPHINCS+-Haraka-256s-robust] SKIPPED     [ 73%]
tests/test_cmdline.py::test_sig[SPHINCS+-Haraka-256s-simple] SKIPPED     [ 74%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHA256-128f-robust] SKIPPED     [ 74%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHA256-128f-simple] SKIPPED     [ 75%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHA256-128s-robust] SKIPPED     [ 76%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHA256-128s-simple] SKIPPED     [ 76%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHA256-192f-robust] SKIPPED     [ 77%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHA256-192f-simple] SKIPPED     [ 78%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHA256-192s-robust] SKIPPED     [ 79%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHA256-192s-simple] SKIPPED     [ 79%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHA256-256f-robust] SKIPPED     [ 80%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHA256-256f-simple] SKIPPED     [ 81%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHA256-256s-robust] SKIPPED     [ 82%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHA256-256s-simple] SKIPPED     [ 82%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHAKE256-128f-robust] SKIPPED   [ 83%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHAKE256-128f-simple] SKIPPED   [ 84%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHAKE256-128s-robust] SKIPPED   [ 84%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHAKE256-128s-simple] SKIPPED   [ 85%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHAKE256-192f-robust] SKIPPED   [ 86%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHAKE256-192f-simple] SKIPPED   [ 87%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHAKE256-192s-robust] SKIPPED   [ 87%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHAKE256-192s-simple] SKIPPED   [ 88%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHAKE256-256f-robust] SKIPPED   [ 89%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHAKE256-256f-simple] SKIPPED   [ 89%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHAKE256-256s-robust] SKIPPED   [ 90%]
tests/test_cmdline.py::test_sig[SPHINCS+-SHAKE256-256s-simple] SKIPPED   [ 91%]
tests/test_cmdline.py::test_sig_stfl[XMSS-SHA2_10_256] FAILED            [ 92%]
tests/test_cmdline.py::test_sig_stfl[XMSS-SHA2_16_256] FAILED            [ 92%]
tests/test_cmdline.py::test_sig_stfl[XMSS-SHA2_20_256] FAILED            [ 93%]
tests/test_cmdline.py::test_sig_stfl[XMSS-SHA2_10_512] FAILED            [ 94%]
tests/test_cmdline.py::test_sig_stfl[XMSS-SHA2_16_512] FAILED            [ 94%]
tests/test_cmdline.py::test_sig_stfl[XMSS-SHA2_20_512] FAILED            [ 95%]
tests/test_cmdline.py::test_sig_stfl[XMSS-SHAKE_10_256] FAILED           [ 96%]
tests/test_cmdline.py::test_sig_stfl[XMSS-SHAKE_16_256] FAILED           [ 97%]
tests/test_cmdline.py::test_sig_stfl[XMSS-SHAKE_20_256] FAILED           [ 97%]
tests/test_cmdline.py::test_sig_stfl[XMSS-SHAKE_10_512] FAILED           [ 98%]
tests/test_cmdline.py::test_sig_stfl[XMSS-SHAKE_16_512] FAILED           [ 99%]
tests/test_cmdline.py::test_sig_stfl[XMSS-SHAKE_20_512] FAILED           [100%]

=================================== FAILURES ===================================
__________________________ test_examples[example_sig] __________________________

program = 'example_sig'

    @helpers.filtered_test
    @pytest.mark.parametrize('program', ['example_kem', 'example_sig'])
    def test_examples(program):
>       helpers.run_subprocess(
            [helpers.path_to_executable(program)],
        )

tests/test_cmdline.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = ['./build/tests/example_sig'], working_dir = '.'
env = {'BASH_ENV': '/usr/share/lmod/lmod/init/bash', 'CHROME_DESKTOP': 'code-url-handler.desktop', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}
expected_returncode = 0, input = None, ignore_returncode = False

    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):
        """
        Helper function to run a shell command and report success/failure
        depending on the exit status of the shell command.
        """
        env_ = os.environ.copy()
        if env is not None:
            env_.update(env)
        env = env_
    
        # Note we need to capture stdout/stderr from the subprocess,
        # then print it, which pytest will then capture and
        # buffer appropriately
        print(working_dir + " > " + " ".join(command))
    
        result = subprocess.run(
                command,
                input=input,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=working_dir,
                env=env,
            )
    
        if not(ignore_returncode) and (result.returncode != expected_returncode):
            print(result.stdout.decode('utf-8'))
>           assert False, "Got unexpected return code {}".format(result.returncode)
E           AssertionError: Got unexpected return code 1

tests/helpers.py:42: AssertionError
----------------------------- Captured stdout call -----------------------------
. > ./build/tests/example_sig
[example_stack] OQS_SIG_dilithium_2 was not enabled at compile-time.

_______________________ test_sig_stfl[XMSS-SHA2_10_256] ________________________

sig_stfl_name = 'XMSS-SHA2_10_256'

    @helpers.filtered_test
    @pytest.mark.parametrize('sig_stfl_name', helpers.available_sig_stfls_by_name())
    def test_sig_stfl(sig_stfl_name):
        if not(helpers.is_sig_stfl_enabled_by_name(sig_stfl_name)): pytest.skip('Not enabled')
>       helpers.run_subprocess(
            [helpers.path_to_executable('test_sig_stfl'), sig_stfl_name],
        )

tests/test_cmdline.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = ['./build/tests/test_sig_stfl', 'XMSS-SHA2_10_256'], working_dir = '.'
env = {'BASH_ENV': '/usr/share/lmod/lmod/init/bash', 'CHROME_DESKTOP': 'code-url-handler.desktop', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}
expected_returncode = 0, input = None, ignore_returncode = False

    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):
        """
        Helper function to run a shell command and report success/failure
        depending on the exit status of the shell command.
        """
        env_ = os.environ.copy()
        if env is not None:
            env_.update(env)
        env = env_
    
        # Note we need to capture stdout/stderr from the subprocess,
        # then print it, which pytest will then capture and
        # buffer appropriately
        print(working_dir + " > " + " ".join(command))
    
        result = subprocess.run(
                command,
                input=input,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=working_dir,
                env=env,
            )
    
        if not(ignore_returncode) and (result.returncode != expected_returncode):
            print(result.stdout.decode('utf-8'))
>           assert False, "Got unexpected return code {}".format(result.returncode)
E           AssertionError: Got unexpected return code 1

tests/helpers.py:42: AssertionError
----------------------------- Captured stdout call -----------------------------

(name)The stateful signature scheme is : XMSS-SHA2_10_256

The name passed in was : XMSS-SHA2_10_256

(symb)The stateful signature scheme is : XMSS

(symb)The stateful signature scheme is : XMSS_SHA256_H10
. > ./build/tests/test_sig_stfl XMSS-SHA2_10_256
Configuration info
==================
Target platform:  x86_64-Linux-5.18.13-100.fc35.x86_64
Compiler:         gcc (11.3.1)
Compile options:  [-march=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]
OQS version:      0.7.2-dev
Git commit:       aba96bade4c8f20e7dad7c846975750ba2bf5071 (+ local modifications)
OpenSSL enabled:  Yes (OpenSSL 1.1.1q  FIPS 5 Jul 2022)
AES:              OpenSSL
SHA-2:            OpenSSL
SHA-3:            C
OQS build flags:  OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=Debug 
CPU exts compile-time:  ADX AES AVX AVX2 BMI1 BMI2 PCLMULQDQ POPCNT SSE SSE2 SSE3


==The algorithm name is :XMSS-SHA2_10_256==
Signature algorithm XMSS-SHA2_10_256 not enabled!

_______________________ test_sig_stfl[XMSS-SHA2_16_256] ________________________

sig_stfl_name = 'XMSS-SHA2_16_256'

    @helpers.filtered_test
    @pytest.mark.parametrize('sig_stfl_name', helpers.available_sig_stfls_by_name())
    def test_sig_stfl(sig_stfl_name):
        if not(helpers.is_sig_stfl_enabled_by_name(sig_stfl_name)): pytest.skip('Not enabled')
>       helpers.run_subprocess(
            [helpers.path_to_executable('test_sig_stfl'), sig_stfl_name],
        )

tests/test_cmdline.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = ['./build/tests/test_sig_stfl', 'XMSS-SHA2_16_256'], working_dir = '.'
env = {'BASH_ENV': '/usr/share/lmod/lmod/init/bash', 'CHROME_DESKTOP': 'code-url-handler.desktop', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}
expected_returncode = 0, input = None, ignore_returncode = False

    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):
        """
        Helper function to run a shell command and report success/failure
        depending on the exit status of the shell command.
        """
        env_ = os.environ.copy()
        if env is not None:
            env_.update(env)
        env = env_
    
        # Note we need to capture stdout/stderr from the subprocess,
        # then print it, which pytest will then capture and
        # buffer appropriately
        print(working_dir + " > " + " ".join(command))
    
        result = subprocess.run(
                command,
                input=input,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=working_dir,
                env=env,
            )
    
        if not(ignore_returncode) and (result.returncode != expected_returncode):
            print(result.stdout.decode('utf-8'))
>           assert False, "Got unexpected return code {}".format(result.returncode)
E           AssertionError: Got unexpected return code 1

tests/helpers.py:42: AssertionError
----------------------------- Captured stdout call -----------------------------

(name)The stateful signature scheme is : XMSS-SHA2_10_256

The name passed in was : XMSS-SHA2_16_256

(name)The stateful signature scheme is : XMSS-SHA2_16_256

The name passed in was : XMSS-SHA2_16_256

(symb)The stateful signature scheme is : XMSS

(symb)The stateful signature scheme is : XMSS_SHA256_H10

(symb)The stateful signature scheme is : XMSS_SHA256_H16
. > ./build/tests/test_sig_stfl XMSS-SHA2_16_256
Configuration info
==================
Target platform:  x86_64-Linux-5.18.13-100.fc35.x86_64
Compiler:         gcc (11.3.1)
Compile options:  [-march=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]
OQS version:      0.7.2-dev
Git commit:       aba96bade4c8f20e7dad7c846975750ba2bf5071 (+ local modifications)
OpenSSL enabled:  Yes (OpenSSL 1.1.1q  FIPS 5 Jul 2022)
AES:              OpenSSL
SHA-2:            OpenSSL
SHA-3:            C
OQS build flags:  OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=Debug 
CPU exts compile-time:  ADX AES AVX AVX2 BMI1 BMI2 PCLMULQDQ POPCNT SSE SSE2 SSE3


==The algorithm name is :XMSS-SHA2_16_256==
Signature algorithm XMSS-SHA2_16_256 not enabled!

_______________________ test_sig_stfl[XMSS-SHA2_20_256] ________________________

sig_stfl_name = 'XMSS-SHA2_20_256'

    @helpers.filtered_test
    @pytest.mark.parametrize('sig_stfl_name', helpers.available_sig_stfls_by_name())
    def test_sig_stfl(sig_stfl_name):
        if not(helpers.is_sig_stfl_enabled_by_name(sig_stfl_name)): pytest.skip('Not enabled')
>       helpers.run_subprocess(
            [helpers.path_to_executable('test_sig_stfl'), sig_stfl_name],
        )

tests/test_cmdline.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = ['./build/tests/test_sig_stfl', 'XMSS-SHA2_20_256'], working_dir = '.'
env = {'BASH_ENV': '/usr/share/lmod/lmod/init/bash', 'CHROME_DESKTOP': 'code-url-handler.desktop', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}
expected_returncode = 0, input = None, ignore_returncode = False

    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):
        """
        Helper function to run a shell command and report success/failure
        depending on the exit status of the shell command.
        """
        env_ = os.environ.copy()
        if env is not None:
            env_.update(env)
        env = env_
    
        # Note we need to capture stdout/stderr from the subprocess,
        # then print it, which pytest will then capture and
        # buffer appropriately
        print(working_dir + " > " + " ".join(command))
    
        result = subprocess.run(
                command,
                input=input,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=working_dir,
                env=env,
            )
    
        if not(ignore_returncode) and (result.returncode != expected_returncode):
            print(result.stdout.decode('utf-8'))
>           assert False, "Got unexpected return code {}".format(result.returncode)
E           AssertionError: Got unexpected return code 1

tests/helpers.py:42: AssertionError
----------------------------- Captured stdout call -----------------------------

(name)The stateful signature scheme is : XMSS-SHA2_10_256

The name passed in was : XMSS-SHA2_20_256

(name)The stateful signature scheme is : XMSS-SHA2_16_256

The name passed in was : XMSS-SHA2_20_256

(name)The stateful signature scheme is : XMSS-SHA2_20_256

The name passed in was : XMSS-SHA2_20_256

(symb)The stateful signature scheme is : XMSS

(symb)The stateful signature scheme is : XMSS_SHA256_H10

(symb)The stateful signature scheme is : XMSS_SHA256_H16

(symb)The stateful signature scheme is : XMSS_SHA256_H20
. > ./build/tests/test_sig_stfl XMSS-SHA2_20_256
Configuration info
==================
Target platform:  x86_64-Linux-5.18.13-100.fc35.x86_64
Compiler:         gcc (11.3.1)
Compile options:  [-march=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]
OQS version:      0.7.2-dev
Git commit:       aba96bade4c8f20e7dad7c846975750ba2bf5071 (+ local modifications)
OpenSSL enabled:  Yes (OpenSSL 1.1.1q  FIPS 5 Jul 2022)
AES:              OpenSSL
SHA-2:            OpenSSL
SHA-3:            C
OQS build flags:  OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=Debug 
CPU exts compile-time:  ADX AES AVX AVX2 BMI1 BMI2 PCLMULQDQ POPCNT SSE SSE2 SSE3


==The algorithm name is :XMSS-SHA2_20_256==
Signature algorithm XMSS-SHA2_20_256 not enabled!

_______________________ test_sig_stfl[XMSS-SHA2_10_512] ________________________

sig_stfl_name = 'XMSS-SHA2_10_512'

    @helpers.filtered_test
    @pytest.mark.parametrize('sig_stfl_name', helpers.available_sig_stfls_by_name())
    def test_sig_stfl(sig_stfl_name):
        if not(helpers.is_sig_stfl_enabled_by_name(sig_stfl_name)): pytest.skip('Not enabled')
>       helpers.run_subprocess(
            [helpers.path_to_executable('test_sig_stfl'), sig_stfl_name],
        )

tests/test_cmdline.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = ['./build/tests/test_sig_stfl', 'XMSS-SHA2_10_512'], working_dir = '.'
env = {'BASH_ENV': '/usr/share/lmod/lmod/init/bash', 'CHROME_DESKTOP': 'code-url-handler.desktop', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}
expected_returncode = 0, input = None, ignore_returncode = False

    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):
        """
        Helper function to run a shell command and report success/failure
        depending on the exit status of the shell command.
        """
        env_ = os.environ.copy()
        if env is not None:
            env_.update(env)
        env = env_
    
        # Note we need to capture stdout/stderr from the subprocess,
        # then print it, which pytest will then capture and
        # buffer appropriately
        print(working_dir + " > " + " ".join(command))
    
        result = subprocess.run(
                command,
                input=input,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=working_dir,
                env=env,
            )
    
        if not(ignore_returncode) and (result.returncode != expected_returncode):
            print(result.stdout.decode('utf-8'))
>           assert False, "Got unexpected return code {}".format(result.returncode)
E           AssertionError: Got unexpected return code 1

tests/helpers.py:42: AssertionError
----------------------------- Captured stdout call -----------------------------

(name)The stateful signature scheme is : XMSS-SHA2_10_256

The name passed in was : XMSS-SHA2_10_512

(name)The stateful signature scheme is : XMSS-SHA2_16_256

The name passed in was : XMSS-SHA2_10_512

(name)The stateful signature scheme is : XMSS-SHA2_20_256

The name passed in was : XMSS-SHA2_10_512

(name)The stateful signature scheme is : XMSS-SHA2_10_512

The name passed in was : XMSS-SHA2_10_512

(symb)The stateful signature scheme is : XMSS

(symb)The stateful signature scheme is : XMSS_SHA256_H10

(symb)The stateful signature scheme is : XMSS_SHA256_H16

(symb)The stateful signature scheme is : XMSS_SHA256_H20

(symb)The stateful signature scheme is : XMSS_SHA512_H10
. > ./build/tests/test_sig_stfl XMSS-SHA2_10_512
Configuration info
==================
Target platform:  x86_64-Linux-5.18.13-100.fc35.x86_64
Compiler:         gcc (11.3.1)
Compile options:  [-march=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]
OQS version:      0.7.2-dev
Git commit:       aba96bade4c8f20e7dad7c846975750ba2bf5071 (+ local modifications)
OpenSSL enabled:  Yes (OpenSSL 1.1.1q  FIPS 5 Jul 2022)
AES:              OpenSSL
SHA-2:            OpenSSL
SHA-3:            C
OQS build flags:  OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=Debug 
CPU exts compile-time:  ADX AES AVX AVX2 BMI1 BMI2 PCLMULQDQ POPCNT SSE SSE2 SSE3


==The algorithm name is :XMSS-SHA2_10_512==
Signature algorithm XMSS-SHA2_10_512 not enabled!

_______________________ test_sig_stfl[XMSS-SHA2_16_512] ________________________

sig_stfl_name = 'XMSS-SHA2_16_512'

    @helpers.filtered_test
    @pytest.mark.parametrize('sig_stfl_name', helpers.available_sig_stfls_by_name())
    def test_sig_stfl(sig_stfl_name):
        if not(helpers.is_sig_stfl_enabled_by_name(sig_stfl_name)): pytest.skip('Not enabled')
>       helpers.run_subprocess(
            [helpers.path_to_executable('test_sig_stfl'), sig_stfl_name],
        )

tests/test_cmdline.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = ['./build/tests/test_sig_stfl', 'XMSS-SHA2_16_512'], working_dir = '.'
env = {'BASH_ENV': '/usr/share/lmod/lmod/init/bash', 'CHROME_DESKTOP': 'code-url-handler.desktop', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}
expected_returncode = 0, input = None, ignore_returncode = False

    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):
        """
        Helper function to run a shell command and report success/failure
        depending on the exit status of the shell command.
        """
        env_ = os.environ.copy()
        if env is not None:
            env_.update(env)
        env = env_
    
        # Note we need to capture stdout/stderr from the subprocess,
        # then print it, which pytest will then capture and
        # buffer appropriately
        print(working_dir + " > " + " ".join(command))
    
        result = subprocess.run(
                command,
                input=input,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=working_dir,
                env=env,
            )
    
        if not(ignore_returncode) and (result.returncode != expected_returncode):
            print(result.stdout.decode('utf-8'))
>           assert False, "Got unexpected return code {}".format(result.returncode)
E           AssertionError: Got unexpected return code 1

tests/helpers.py:42: AssertionError
----------------------------- Captured stdout call -----------------------------

(name)The stateful signature scheme is : XMSS-SHA2_10_256

The name passed in was : XMSS-SHA2_16_512

(name)The stateful signature scheme is : XMSS-SHA2_16_256

The name passed in was : XMSS-SHA2_16_512

(name)The stateful signature scheme is : XMSS-SHA2_20_256

The name passed in was : XMSS-SHA2_16_512

(name)The stateful signature scheme is : XMSS-SHA2_10_512

The name passed in was : XMSS-SHA2_16_512

(name)The stateful signature scheme is : XMSS-SHA2_16_512

The name passed in was : XMSS-SHA2_16_512

(symb)The stateful signature scheme is : XMSS

(symb)The stateful signature scheme is : XMSS_SHA256_H10

(symb)The stateful signature scheme is : XMSS_SHA256_H16

(symb)The stateful signature scheme is : XMSS_SHA256_H20

(symb)The stateful signature scheme is : XMSS_SHA512_H10

(symb)The stateful signature scheme is : XMSS_SHA512_H16
. > ./build/tests/test_sig_stfl XMSS-SHA2_16_512
Configuration info
==================
Target platform:  x86_64-Linux-5.18.13-100.fc35.x86_64
Compiler:         gcc (11.3.1)
Compile options:  [-march=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]
OQS version:      0.7.2-dev
Git commit:       aba96bade4c8f20e7dad7c846975750ba2bf5071 (+ local modifications)
OpenSSL enabled:  Yes (OpenSSL 1.1.1q  FIPS 5 Jul 2022)
AES:              OpenSSL
SHA-2:            OpenSSL
SHA-3:            C
OQS build flags:  OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=Debug 
CPU exts compile-time:  ADX AES AVX AVX2 BMI1 BMI2 PCLMULQDQ POPCNT SSE SSE2 SSE3


==The algorithm name is :XMSS-SHA2_16_512==
Signature algorithm XMSS-SHA2_16_512 not enabled!

_______________________ test_sig_stfl[XMSS-SHA2_20_512] ________________________

sig_stfl_name = 'XMSS-SHA2_20_512'

    @helpers.filtered_test
    @pytest.mark.parametrize('sig_stfl_name', helpers.available_sig_stfls_by_name())
    def test_sig_stfl(sig_stfl_name):
        if not(helpers.is_sig_stfl_enabled_by_name(sig_stfl_name)): pytest.skip('Not enabled')
>       helpers.run_subprocess(
            [helpers.path_to_executable('test_sig_stfl'), sig_stfl_name],
        )

tests/test_cmdline.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = ['./build/tests/test_sig_stfl', 'XMSS-SHA2_20_512'], working_dir = '.'
env = {'BASH_ENV': '/usr/share/lmod/lmod/init/bash', 'CHROME_DESKTOP': 'code-url-handler.desktop', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}
expected_returncode = 0, input = None, ignore_returncode = False

    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):
        """
        Helper function to run a shell command and report success/failure
        depending on the exit status of the shell command.
        """
        env_ = os.environ.copy()
        if env is not None:
            env_.update(env)
        env = env_
    
        # Note we need to capture stdout/stderr from the subprocess,
        # then print it, which pytest will then capture and
        # buffer appropriately
        print(working_dir + " > " + " ".join(command))
    
        result = subprocess.run(
                command,
                input=input,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=working_dir,
                env=env,
            )
    
        if not(ignore_returncode) and (result.returncode != expected_returncode):
            print(result.stdout.decode('utf-8'))
>           assert False, "Got unexpected return code {}".format(result.returncode)
E           AssertionError: Got unexpected return code 1

tests/helpers.py:42: AssertionError
----------------------------- Captured stdout call -----------------------------

(name)The stateful signature scheme is : XMSS-SHA2_10_256

The name passed in was : XMSS-SHA2_20_512

(name)The stateful signature scheme is : XMSS-SHA2_16_256

The name passed in was : XMSS-SHA2_20_512

(name)The stateful signature scheme is : XMSS-SHA2_20_256

The name passed in was : XMSS-SHA2_20_512

(name)The stateful signature scheme is : XMSS-SHA2_10_512

The name passed in was : XMSS-SHA2_20_512

(name)The stateful signature scheme is : XMSS-SHA2_16_512

The name passed in was : XMSS-SHA2_20_512

(name)The stateful signature scheme is : XMSS-SHA2_20_512

The name passed in was : XMSS-SHA2_20_512

(symb)The stateful signature scheme is : XMSS

(symb)The stateful signature scheme is : XMSS_SHA256_H10

(symb)The stateful signature scheme is : XMSS_SHA256_H16

(symb)The stateful signature scheme is : XMSS_SHA256_H20

(symb)The stateful signature scheme is : XMSS_SHA512_H10

(symb)The stateful signature scheme is : XMSS_SHA512_H16

(symb)The stateful signature scheme is : XMSS_SHA512_H20
. > ./build/tests/test_sig_stfl XMSS-SHA2_20_512
Configuration info
==================
Target platform:  x86_64-Linux-5.18.13-100.fc35.x86_64
Compiler:         gcc (11.3.1)
Compile options:  [-march=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]
OQS version:      0.7.2-dev
Git commit:       aba96bade4c8f20e7dad7c846975750ba2bf5071 (+ local modifications)
OpenSSL enabled:  Yes (OpenSSL 1.1.1q  FIPS 5 Jul 2022)
AES:              OpenSSL
SHA-2:            OpenSSL
SHA-3:            C
OQS build flags:  OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=Debug 
CPU exts compile-time:  ADX AES AVX AVX2 BMI1 BMI2 PCLMULQDQ POPCNT SSE SSE2 SSE3


==The algorithm name is :XMSS-SHA2_20_512==
Signature algorithm XMSS-SHA2_20_512 not enabled!

_______________________ test_sig_stfl[XMSS-SHAKE_10_256] _______________________

sig_stfl_name = 'XMSS-SHAKE_10_256'

    @helpers.filtered_test
    @pytest.mark.parametrize('sig_stfl_name', helpers.available_sig_stfls_by_name())
    def test_sig_stfl(sig_stfl_name):
        if not(helpers.is_sig_stfl_enabled_by_name(sig_stfl_name)): pytest.skip('Not enabled')
>       helpers.run_subprocess(
            [helpers.path_to_executable('test_sig_stfl'), sig_stfl_name],
        )

tests/test_cmdline.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = ['./build/tests/test_sig_stfl', 'XMSS-SHAKE_10_256']
working_dir = '.'
env = {'BASH_ENV': '/usr/share/lmod/lmod/init/bash', 'CHROME_DESKTOP': 'code-url-handler.desktop', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}
expected_returncode = 0, input = None, ignore_returncode = False

    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):
        """
        Helper function to run a shell command and report success/failure
        depending on the exit status of the shell command.
        """
        env_ = os.environ.copy()
        if env is not None:
            env_.update(env)
        env = env_
    
        # Note we need to capture stdout/stderr from the subprocess,
        # then print it, which pytest will then capture and
        # buffer appropriately
        print(working_dir + " > " + " ".join(command))
    
        result = subprocess.run(
                command,
                input=input,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=working_dir,
                env=env,
            )
    
        if not(ignore_returncode) and (result.returncode != expected_returncode):
            print(result.stdout.decode('utf-8'))
>           assert False, "Got unexpected return code {}".format(result.returncode)
E           AssertionError: Got unexpected return code 1

tests/helpers.py:42: AssertionError
----------------------------- Captured stdout call -----------------------------

(name)The stateful signature scheme is : XMSS-SHA2_10_256

The name passed in was : XMSS-SHAKE_10_256

(name)The stateful signature scheme is : XMSS-SHA2_16_256

The name passed in was : XMSS-SHAKE_10_256

(name)The stateful signature scheme is : XMSS-SHA2_20_256

The name passed in was : XMSS-SHAKE_10_256

(name)The stateful signature scheme is : XMSS-SHA2_10_512

The name passed in was : XMSS-SHAKE_10_256

(name)The stateful signature scheme is : XMSS-SHA2_16_512

The name passed in was : XMSS-SHAKE_10_256

(name)The stateful signature scheme is : XMSS-SHA2_20_512

The name passed in was : XMSS-SHAKE_10_256

(name)The stateful signature scheme is : XMSS-SHAKE_10_256

The name passed in was : XMSS-SHAKE_10_256

(symb)The stateful signature scheme is : XMSS

(symb)The stateful signature scheme is : XMSS_SHA256_H10

(symb)The stateful signature scheme is : XMSS_SHA256_H16

(symb)The stateful signature scheme is : XMSS_SHA256_H20

(symb)The stateful signature scheme is : XMSS_SHA512_H10

(symb)The stateful signature scheme is : XMSS_SHA512_H16

(symb)The stateful signature scheme is : XMSS_SHA512_H20

(symb)The stateful signature scheme is : XMSS_SHAKE256_H10
. > ./build/tests/test_sig_stfl XMSS-SHAKE_10_256
Configuration info
==================
Target platform:  x86_64-Linux-5.18.13-100.fc35.x86_64
Compiler:         gcc (11.3.1)
Compile options:  [-march=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]
OQS version:      0.7.2-dev
Git commit:       aba96bade4c8f20e7dad7c846975750ba2bf5071 (+ local modifications)
OpenSSL enabled:  Yes (OpenSSL 1.1.1q  FIPS 5 Jul 2022)
AES:              OpenSSL
SHA-2:            OpenSSL
SHA-3:            C
OQS build flags:  OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=Debug 
CPU exts compile-time:  ADX AES AVX AVX2 BMI1 BMI2 PCLMULQDQ POPCNT SSE SSE2 SSE3


==The algorithm name is :XMSS-SHAKE_10_256==
Signature algorithm XMSS-SHAKE_10_256 not enabled!

_______________________ test_sig_stfl[XMSS-SHAKE_16_256] _______________________

sig_stfl_name = 'XMSS-SHAKE_16_256'

    @helpers.filtered_test
    @pytest.mark.parametrize('sig_stfl_name', helpers.available_sig_stfls_by_name())
    def test_sig_stfl(sig_stfl_name):
        if not(helpers.is_sig_stfl_enabled_by_name(sig_stfl_name)): pytest.skip('Not enabled')
>       helpers.run_subprocess(
            [helpers.path_to_executable('test_sig_stfl'), sig_stfl_name],
        )

tests/test_cmdline.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = ['./build/tests/test_sig_stfl', 'XMSS-SHAKE_16_256']
working_dir = '.'
env = {'BASH_ENV': '/usr/share/lmod/lmod/init/bash', 'CHROME_DESKTOP': 'code-url-handler.desktop', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}
expected_returncode = 0, input = None, ignore_returncode = False

    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):
        """
        Helper function to run a shell command and report success/failure
        depending on the exit status of the shell command.
        """
        env_ = os.environ.copy()
        if env is not None:
            env_.update(env)
        env = env_
    
        # Note we need to capture stdout/stderr from the subprocess,
        # then print it, which pytest will then capture and
        # buffer appropriately
        print(working_dir + " > " + " ".join(command))
    
        result = subprocess.run(
                command,
                input=input,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=working_dir,
                env=env,
            )
    
        if not(ignore_returncode) and (result.returncode != expected_returncode):
            print(result.stdout.decode('utf-8'))
>           assert False, "Got unexpected return code {}".format(result.returncode)
E           AssertionError: Got unexpected return code 1

tests/helpers.py:42: AssertionError
----------------------------- Captured stdout call -----------------------------

(name)The stateful signature scheme is : XMSS-SHA2_10_256

The name passed in was : XMSS-SHAKE_16_256

(name)The stateful signature scheme is : XMSS-SHA2_16_256

The name passed in was : XMSS-SHAKE_16_256

(name)The stateful signature scheme is : XMSS-SHA2_20_256

The name passed in was : XMSS-SHAKE_16_256

(name)The stateful signature scheme is : XMSS-SHA2_10_512

The name passed in was : XMSS-SHAKE_16_256

(name)The stateful signature scheme is : XMSS-SHA2_16_512

The name passed in was : XMSS-SHAKE_16_256

(name)The stateful signature scheme is : XMSS-SHA2_20_512

The name passed in was : XMSS-SHAKE_16_256

(name)The stateful signature scheme is : XMSS-SHAKE_10_256

The name passed in was : XMSS-SHAKE_16_256

(name)The stateful signature scheme is : XMSS-SHAKE_16_256

The name passed in was : XMSS-SHAKE_16_256

(symb)The stateful signature scheme is : XMSS

(symb)The stateful signature scheme is : XMSS_SHA256_H10

(symb)The stateful signature scheme is : XMSS_SHA256_H16

(symb)The stateful signature scheme is : XMSS_SHA256_H20

(symb)The stateful signature scheme is : XMSS_SHA512_H10

(symb)The stateful signature scheme is : XMSS_SHA512_H16

(symb)The stateful signature scheme is : XMSS_SHA512_H20

(symb)The stateful signature scheme is : XMSS_SHAKE256_H10

(symb)The stateful signature scheme is : XMSS_SHAKE256_H16
. > ./build/tests/test_sig_stfl XMSS-SHAKE_16_256
Configuration info
==================
Target platform:  x86_64-Linux-5.18.13-100.fc35.x86_64
Compiler:         gcc (11.3.1)
Compile options:  [-march=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]
OQS version:      0.7.2-dev
Git commit:       aba96bade4c8f20e7dad7c846975750ba2bf5071 (+ local modifications)
OpenSSL enabled:  Yes (OpenSSL 1.1.1q  FIPS 5 Jul 2022)
AES:              OpenSSL
SHA-2:            OpenSSL
SHA-3:            C
OQS build flags:  OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=Debug 
CPU exts compile-time:  ADX AES AVX AVX2 BMI1 BMI2 PCLMULQDQ POPCNT SSE SSE2 SSE3


==The algorithm name is :XMSS-SHAKE_16_256==
Signature algorithm XMSS-SHAKE_16_256 not enabled!

_______________________ test_sig_stfl[XMSS-SHAKE_20_256] _______________________

sig_stfl_name = 'XMSS-SHAKE_20_256'

    @helpers.filtered_test
    @pytest.mark.parametrize('sig_stfl_name', helpers.available_sig_stfls_by_name())
    def test_sig_stfl(sig_stfl_name):
        if not(helpers.is_sig_stfl_enabled_by_name(sig_stfl_name)): pytest.skip('Not enabled')
>       helpers.run_subprocess(
            [helpers.path_to_executable('test_sig_stfl'), sig_stfl_name],
        )

tests/test_cmdline.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = ['./build/tests/test_sig_stfl', 'XMSS-SHAKE_20_256']
working_dir = '.'
env = {'BASH_ENV': '/usr/share/lmod/lmod/init/bash', 'CHROME_DESKTOP': 'code-url-handler.desktop', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}
expected_returncode = 0, input = None, ignore_returncode = False

    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):
        """
        Helper function to run a shell command and report success/failure
        depending on the exit status of the shell command.
        """
        env_ = os.environ.copy()
        if env is not None:
            env_.update(env)
        env = env_
    
        # Note we need to capture stdout/stderr from the subprocess,
        # then print it, which pytest will then capture and
        # buffer appropriately
        print(working_dir + " > " + " ".join(command))
    
        result = subprocess.run(
                command,
                input=input,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=working_dir,
                env=env,
            )
    
        if not(ignore_returncode) and (result.returncode != expected_returncode):
            print(result.stdout.decode('utf-8'))
>           assert False, "Got unexpected return code {}".format(result.returncode)
E           AssertionError: Got unexpected return code 1

tests/helpers.py:42: AssertionError
----------------------------- Captured stdout call -----------------------------

(name)The stateful signature scheme is : XMSS-SHA2_10_256

The name passed in was : XMSS-SHAKE_20_256

(name)The stateful signature scheme is : XMSS-SHA2_16_256

The name passed in was : XMSS-SHAKE_20_256

(name)The stateful signature scheme is : XMSS-SHA2_20_256

The name passed in was : XMSS-SHAKE_20_256

(name)The stateful signature scheme is : XMSS-SHA2_10_512

The name passed in was : XMSS-SHAKE_20_256

(name)The stateful signature scheme is : XMSS-SHA2_16_512

The name passed in was : XMSS-SHAKE_20_256

(name)The stateful signature scheme is : XMSS-SHA2_20_512

The name passed in was : XMSS-SHAKE_20_256

(name)The stateful signature scheme is : XMSS-SHAKE_10_256

The name passed in was : XMSS-SHAKE_20_256

(name)The stateful signature scheme is : XMSS-SHAKE_16_256

The name passed in was : XMSS-SHAKE_20_256

(name)The stateful signature scheme is : XMSS-SHAKE_20_256

The name passed in was : XMSS-SHAKE_20_256

(symb)The stateful signature scheme is : XMSS

(symb)The stateful signature scheme is : XMSS_SHA256_H10

(symb)The stateful signature scheme is : XMSS_SHA256_H16

(symb)The stateful signature scheme is : XMSS_SHA256_H20

(symb)The stateful signature scheme is : XMSS_SHA512_H10

(symb)The stateful signature scheme is : XMSS_SHA512_H16

(symb)The stateful signature scheme is : XMSS_SHA512_H20

(symb)The stateful signature scheme is : XMSS_SHAKE256_H10

(symb)The stateful signature scheme is : XMSS_SHAKE256_H16

(symb)The stateful signature scheme is : XMSS_SHAKE256_H20
. > ./build/tests/test_sig_stfl XMSS-SHAKE_20_256
Configuration info
==================
Target platform:  x86_64-Linux-5.18.13-100.fc35.x86_64
Compiler:         gcc (11.3.1)
Compile options:  [-march=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]
OQS version:      0.7.2-dev
Git commit:       aba96bade4c8f20e7dad7c846975750ba2bf5071 (+ local modifications)
OpenSSL enabled:  Yes (OpenSSL 1.1.1q  FIPS 5 Jul 2022)
AES:              OpenSSL
SHA-2:            OpenSSL
SHA-3:            C
OQS build flags:  OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=Debug 
CPU exts compile-time:  ADX AES AVX AVX2 BMI1 BMI2 PCLMULQDQ POPCNT SSE SSE2 SSE3


==The algorithm name is :XMSS-SHAKE_20_256==
Signature algorithm XMSS-SHAKE_20_256 not enabled!

_______________________ test_sig_stfl[XMSS-SHAKE_10_512] _______________________

sig_stfl_name = 'XMSS-SHAKE_10_512'

    @helpers.filtered_test
    @pytest.mark.parametrize('sig_stfl_name', helpers.available_sig_stfls_by_name())
    def test_sig_stfl(sig_stfl_name):
        if not(helpers.is_sig_stfl_enabled_by_name(sig_stfl_name)): pytest.skip('Not enabled')
>       helpers.run_subprocess(
            [helpers.path_to_executable('test_sig_stfl'), sig_stfl_name],
        )

tests/test_cmdline.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = ['./build/tests/test_sig_stfl', 'XMSS-SHAKE_10_512']
working_dir = '.'
env = {'BASH_ENV': '/usr/share/lmod/lmod/init/bash', 'CHROME_DESKTOP': 'code-url-handler.desktop', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}
expected_returncode = 0, input = None, ignore_returncode = False

    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):
        """
        Helper function to run a shell command and report success/failure
        depending on the exit status of the shell command.
        """
        env_ = os.environ.copy()
        if env is not None:
            env_.update(env)
        env = env_
    
        # Note we need to capture stdout/stderr from the subprocess,
        # then print it, which pytest will then capture and
        # buffer appropriately
        print(working_dir + " > " + " ".join(command))
    
        result = subprocess.run(
                command,
                input=input,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=working_dir,
                env=env,
            )
    
        if not(ignore_returncode) and (result.returncode != expected_returncode):
            print(result.stdout.decode('utf-8'))
>           assert False, "Got unexpected return code {}".format(result.returncode)
E           AssertionError: Got unexpected return code 1

tests/helpers.py:42: AssertionError
----------------------------- Captured stdout call -----------------------------

(name)The stateful signature scheme is : XMSS-SHA2_10_256

The name passed in was : XMSS-SHAKE_10_512

(name)The stateful signature scheme is : XMSS-SHA2_16_256

The name passed in was : XMSS-SHAKE_10_512

(name)The stateful signature scheme is : XMSS-SHA2_20_256

The name passed in was : XMSS-SHAKE_10_512

(name)The stateful signature scheme is : XMSS-SHA2_10_512

The name passed in was : XMSS-SHAKE_10_512

(name)The stateful signature scheme is : XMSS-SHA2_16_512

The name passed in was : XMSS-SHAKE_10_512

(name)The stateful signature scheme is : XMSS-SHA2_20_512

The name passed in was : XMSS-SHAKE_10_512

(name)The stateful signature scheme is : XMSS-SHAKE_10_256

The name passed in was : XMSS-SHAKE_10_512

(name)The stateful signature scheme is : XMSS-SHAKE_16_256

The name passed in was : XMSS-SHAKE_10_512

(name)The stateful signature scheme is : XMSS-SHAKE_20_256

The name passed in was : XMSS-SHAKE_10_512

(name)The stateful signature scheme is : XMSS-SHAKE_10_512

The name passed in was : XMSS-SHAKE_10_512

(symb)The stateful signature scheme is : XMSS

(symb)The stateful signature scheme is : XMSS_SHA256_H10

(symb)The stateful signature scheme is : XMSS_SHA256_H16

(symb)The stateful signature scheme is : XMSS_SHA256_H20

(symb)The stateful signature scheme is : XMSS_SHA512_H10

(symb)The stateful signature scheme is : XMSS_SHA512_H16

(symb)The stateful signature scheme is : XMSS_SHA512_H20

(symb)The stateful signature scheme is : XMSS_SHAKE256_H10

(symb)The stateful signature scheme is : XMSS_SHAKE256_H16

(symb)The stateful signature scheme is : XMSS_SHAKE256_H20

(symb)The stateful signature scheme is : XMSS_SHAKE512_H10
. > ./build/tests/test_sig_stfl XMSS-SHAKE_10_512
Configuration info
==================
Target platform:  x86_64-Linux-5.18.13-100.fc35.x86_64
Compiler:         gcc (11.3.1)
Compile options:  [-march=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]
OQS version:      0.7.2-dev
Git commit:       aba96bade4c8f20e7dad7c846975750ba2bf5071 (+ local modifications)
OpenSSL enabled:  Yes (OpenSSL 1.1.1q  FIPS 5 Jul 2022)
AES:              OpenSSL
SHA-2:            OpenSSL
SHA-3:            C
OQS build flags:  OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=Debug 
CPU exts compile-time:  ADX AES AVX AVX2 BMI1 BMI2 PCLMULQDQ POPCNT SSE SSE2 SSE3


==The algorithm name is :XMSS-SHAKE_10_512==
Signature algorithm XMSS-SHAKE_10_512 not enabled!

_______________________ test_sig_stfl[XMSS-SHAKE_16_512] _______________________

sig_stfl_name = 'XMSS-SHAKE_16_512'

    @helpers.filtered_test
    @pytest.mark.parametrize('sig_stfl_name', helpers.available_sig_stfls_by_name())
    def test_sig_stfl(sig_stfl_name):
        if not(helpers.is_sig_stfl_enabled_by_name(sig_stfl_name)): pytest.skip('Not enabled')
>       helpers.run_subprocess(
            [helpers.path_to_executable('test_sig_stfl'), sig_stfl_name],
        )

tests/test_cmdline.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = ['./build/tests/test_sig_stfl', 'XMSS-SHAKE_16_512']
working_dir = '.'
env = {'BASH_ENV': '/usr/share/lmod/lmod/init/bash', 'CHROME_DESKTOP': 'code-url-handler.desktop', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}
expected_returncode = 0, input = None, ignore_returncode = False

    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):
        """
        Helper function to run a shell command and report success/failure
        depending on the exit status of the shell command.
        """
        env_ = os.environ.copy()
        if env is not None:
            env_.update(env)
        env = env_
    
        # Note we need to capture stdout/stderr from the subprocess,
        # then print it, which pytest will then capture and
        # buffer appropriately
        print(working_dir + " > " + " ".join(command))
    
        result = subprocess.run(
                command,
                input=input,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=working_dir,
                env=env,
            )
    
        if not(ignore_returncode) and (result.returncode != expected_returncode):
            print(result.stdout.decode('utf-8'))
>           assert False, "Got unexpected return code {}".format(result.returncode)
E           AssertionError: Got unexpected return code 1

tests/helpers.py:42: AssertionError
----------------------------- Captured stdout call -----------------------------

(name)The stateful signature scheme is : XMSS-SHA2_10_256

The name passed in was : XMSS-SHAKE_16_512

(name)The stateful signature scheme is : XMSS-SHA2_16_256

The name passed in was : XMSS-SHAKE_16_512

(name)The stateful signature scheme is : XMSS-SHA2_20_256

The name passed in was : XMSS-SHAKE_16_512

(name)The stateful signature scheme is : XMSS-SHA2_10_512

The name passed in was : XMSS-SHAKE_16_512

(name)The stateful signature scheme is : XMSS-SHA2_16_512

The name passed in was : XMSS-SHAKE_16_512

(name)The stateful signature scheme is : XMSS-SHA2_20_512

The name passed in was : XMSS-SHAKE_16_512

(name)The stateful signature scheme is : XMSS-SHAKE_10_256

The name passed in was : XMSS-SHAKE_16_512

(name)The stateful signature scheme is : XMSS-SHAKE_16_256

The name passed in was : XMSS-SHAKE_16_512

(name)The stateful signature scheme is : XMSS-SHAKE_20_256

The name passed in was : XMSS-SHAKE_16_512

(name)The stateful signature scheme is : XMSS-SHAKE_10_512

The name passed in was : XMSS-SHAKE_16_512

(name)The stateful signature scheme is : XMSS-SHAKE_16_512

The name passed in was : XMSS-SHAKE_16_512

(symb)The stateful signature scheme is : XMSS

(symb)The stateful signature scheme is : XMSS_SHA256_H10

(symb)The stateful signature scheme is : XMSS_SHA256_H16

(symb)The stateful signature scheme is : XMSS_SHA256_H20

(symb)The stateful signature scheme is : XMSS_SHA512_H10

(symb)The stateful signature scheme is : XMSS_SHA512_H16

(symb)The stateful signature scheme is : XMSS_SHA512_H20

(symb)The stateful signature scheme is : XMSS_SHAKE256_H10

(symb)The stateful signature scheme is : XMSS_SHAKE256_H16

(symb)The stateful signature scheme is : XMSS_SHAKE256_H20

(symb)The stateful signature scheme is : XMSS_SHAKE512_H10

(symb)The stateful signature scheme is : XMSS_SHAKE512_H16
. > ./build/tests/test_sig_stfl XMSS-SHAKE_16_512
Configuration info
==================
Target platform:  x86_64-Linux-5.18.13-100.fc35.x86_64
Compiler:         gcc (11.3.1)
Compile options:  [-march=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]
OQS version:      0.7.2-dev
Git commit:       aba96bade4c8f20e7dad7c846975750ba2bf5071 (+ local modifications)
OpenSSL enabled:  Yes (OpenSSL 1.1.1q  FIPS 5 Jul 2022)
AES:              OpenSSL
SHA-2:            OpenSSL
SHA-3:            C
OQS build flags:  OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=Debug 
CPU exts compile-time:  ADX AES AVX AVX2 BMI1 BMI2 PCLMULQDQ POPCNT SSE SSE2 SSE3


==The algorithm name is :XMSS-SHAKE_16_512==
Signature algorithm XMSS-SHAKE_16_512 not enabled!

_______________________ test_sig_stfl[XMSS-SHAKE_20_512] _______________________

sig_stfl_name = 'XMSS-SHAKE_20_512'

    @helpers.filtered_test
    @pytest.mark.parametrize('sig_stfl_name', helpers.available_sig_stfls_by_name())
    def test_sig_stfl(sig_stfl_name):
        if not(helpers.is_sig_stfl_enabled_by_name(sig_stfl_name)): pytest.skip('Not enabled')
>       helpers.run_subprocess(
            [helpers.path_to_executable('test_sig_stfl'), sig_stfl_name],
        )

tests/test_cmdline.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = ['./build/tests/test_sig_stfl', 'XMSS-SHAKE_20_512']
working_dir = '.'
env = {'BASH_ENV': '/usr/share/lmod/lmod/init/bash', 'CHROME_DESKTOP': 'code-url-handler.desktop', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}
expected_returncode = 0, input = None, ignore_returncode = False

    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):
        """
        Helper function to run a shell command and report success/failure
        depending on the exit status of the shell command.
        """
        env_ = os.environ.copy()
        if env is not None:
            env_.update(env)
        env = env_
    
        # Note we need to capture stdout/stderr from the subprocess,
        # then print it, which pytest will then capture and
        # buffer appropriately
        print(working_dir + " > " + " ".join(command))
    
        result = subprocess.run(
                command,
                input=input,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=working_dir,
                env=env,
            )
    
        if not(ignore_returncode) and (result.returncode != expected_returncode):
            print(result.stdout.decode('utf-8'))
>           assert False, "Got unexpected return code {}".format(result.returncode)
E           AssertionError: Got unexpected return code 1

tests/helpers.py:42: AssertionError
----------------------------- Captured stdout call -----------------------------

(name)The stateful signature scheme is : XMSS-SHA2_10_256

The name passed in was : XMSS-SHAKE_20_512

(name)The stateful signature scheme is : XMSS-SHA2_16_256

The name passed in was : XMSS-SHAKE_20_512

(name)The stateful signature scheme is : XMSS-SHA2_20_256

The name passed in was : XMSS-SHAKE_20_512

(name)The stateful signature scheme is : XMSS-SHA2_10_512

The name passed in was : XMSS-SHAKE_20_512

(name)The stateful signature scheme is : XMSS-SHA2_16_512

The name passed in was : XMSS-SHAKE_20_512

(name)The stateful signature scheme is : XMSS-SHA2_20_512

The name passed in was : XMSS-SHAKE_20_512

(name)The stateful signature scheme is : XMSS-SHAKE_10_256

The name passed in was : XMSS-SHAKE_20_512

(name)The stateful signature scheme is : XMSS-SHAKE_16_256

The name passed in was : XMSS-SHAKE_20_512

(name)The stateful signature scheme is : XMSS-SHAKE_20_256

The name passed in was : XMSS-SHAKE_20_512

(name)The stateful signature scheme is : XMSS-SHAKE_10_512

The name passed in was : XMSS-SHAKE_20_512

(name)The stateful signature scheme is : XMSS-SHAKE_16_512

The name passed in was : XMSS-SHAKE_20_512

(name)The stateful signature scheme is : XMSS-SHAKE_20_512

The name passed in was : XMSS-SHAKE_20_512

(symb)The stateful signature scheme is : XMSS

(symb)The stateful signature scheme is : XMSS_SHA256_H10

(symb)The stateful signature scheme is : XMSS_SHA256_H16

(symb)The stateful signature scheme is : XMSS_SHA256_H20

(symb)The stateful signature scheme is : XMSS_SHA512_H10

(symb)The stateful signature scheme is : XMSS_SHA512_H16

(symb)The stateful signature scheme is : XMSS_SHA512_H20

(symb)The stateful signature scheme is : XMSS_SHAKE256_H10

(symb)The stateful signature scheme is : XMSS_SHAKE256_H16

(symb)The stateful signature scheme is : XMSS_SHAKE256_H20

(symb)The stateful signature scheme is : XMSS_SHAKE512_H10

(symb)The stateful signature scheme is : XMSS_SHAKE512_H16

(symb)The stateful signature scheme is : XMSS_SHAKE512_H20
. > ./build/tests/test_sig_stfl XMSS-SHAKE_20_512
Configuration info
==================
Target platform:  x86_64-Linux-5.18.13-100.fc35.x86_64
Compiler:         gcc (11.3.1)
Compile options:  [-march=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]
OQS version:      0.7.2-dev
Git commit:       aba96bade4c8f20e7dad7c846975750ba2bf5071 (+ local modifications)
OpenSSL enabled:  Yes (OpenSSL 1.1.1q  FIPS 5 Jul 2022)
AES:              OpenSSL
SHA-2:            OpenSSL
SHA-3:            C
OQS build flags:  OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=Debug 
CPU exts compile-time:  ADX AES AVX AVX2 BMI1 BMI2 PCLMULQDQ POPCNT SSE SSE2 SSE3


==The algorithm name is :XMSS-SHAKE_20_512==
Signature algorithm XMSS-SHAKE_20_512 not enabled!

=========================== short test summary info ============================
FAILED tests/test_cmdline.py::test_examples[example_sig] - AssertionError: Go...
FAILED tests/test_cmdline.py::test_sig_stfl[XMSS-SHA2_10_256] - AssertionErro...
FAILED tests/test_cmdline.py::test_sig_stfl[XMSS-SHA2_16_256] - AssertionErro...
FAILED tests/test_cmdline.py::test_sig_stfl[XMSS-SHA2_20_256] - AssertionErro...
FAILED tests/test_cmdline.py::test_sig_stfl[XMSS-SHA2_10_512] - AssertionErro...
FAILED tests/test_cmdline.py::test_sig_stfl[XMSS-SHA2_16_512] - AssertionErro...
FAILED tests/test_cmdline.py::test_sig_stfl[XMSS-SHA2_20_512] - AssertionErro...
FAILED tests/test_cmdline.py::test_sig_stfl[XMSS-SHAKE_10_256] - AssertionErr...
FAILED tests/test_cmdline.py::test_sig_stfl[XMSS-SHAKE_16_256] - AssertionErr...
FAILED tests/test_cmdline.py::test_sig_stfl[XMSS-SHAKE_20_256] - AssertionErr...
FAILED tests/test_cmdline.py::test_sig_stfl[XMSS-SHAKE_10_512] - AssertionErr...
FAILED tests/test_cmdline.py::test_sig_stfl[XMSS-SHAKE_16_512] - AssertionErr...
FAILED tests/test_cmdline.py::test_sig_stfl[XMSS-SHAKE_20_512] - AssertionErr...
================== 13 failed, 63 passed, 63 skipped in 18.92s ==================
